//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.0.1-b01-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2007.08.17 at 01:20:51 PM BST 
//


package psidev.psi.ms.mzml.mapping.jaxb;

import org.w3c.dom.Element;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import org.w3c.dom.Node;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;
import java.io.ByteArrayInputStream;
import javax.xml.bind.JAXBElement;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElementRef;
import javax.xml.bind.annotation.XmlElementRefs;
import javax.xml.bind.annotation.XmlType;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.DocumentBuilder;


/**
 * List with the different components used in the mass spectrometer.
 * 
 * <p>Java class for ComponentListType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="ComponentListType">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence maxOccurs="unbounded" minOccurs="3">
 *         &lt;choice>
 *           &lt;element name="source" type="{http://psi.hupo.org/schema_revision/mzML_0.93}ComponentType"/>
 *           &lt;element name="analyzer" type="{http://psi.hupo.org/schema_revision/mzML_0.93}ComponentType"/>
 *           &lt;element name="detector" type="{http://psi.hupo.org/schema_revision/mzML_0.93}ComponentType"/>
 *         &lt;/choice>
 *       &lt;/sequence>
 *       &lt;attribute name="count" use="required" type="{http://www.w3.org/2001/XMLSchema}nonNegativeInteger" />
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "ComponentListType", propOrder = {
    "sourceOrAnalyzerOrDetector"
})
public class ComponentListType {

    @XmlElementRefs({
        @XmlElementRef(name = "detector", namespace = "http://psi.hupo.org/schema_revision/mzML_0.93", type = JAXBElement.class),
        @XmlElementRef(name = "source", namespace = "http://psi.hupo.org/schema_revision/mzML_0.93", type = JAXBElement.class),
        @XmlElementRef(name = "analyzer", namespace = "http://psi.hupo.org/schema_revision/mzML_0.93", type = JAXBElement.class)
    })
    protected List<ComponentType> sources;
    protected List<ComponentType> analyzers;
    protected List<ComponentType> detectors;
    @XmlAttribute(required = true)
    protected BigInteger count;


    private String elementName = "componentList";

    public ComponentListType() {}

    public ComponentListType(String xmlSnippet) {
        parseXml(xmlSnippet);
    }

    public ComponentListType(Element element) {
        create(element);
    }

    ///////////////////
    // utilities

    private void parseXml(String xmlSnippet) {
        Document document = null;
        try {
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            DocumentBuilder builder = factory.newDocumentBuilder();
            ByteArrayInputStream str = new ByteArrayInputStream(xmlSnippet.getBytes());
            document = builder.parse( str );
        } catch ( Exception e ) {
            e.printStackTrace();
        }


        // we always expect a String representing a single xml tag, not a list of xml tags!
        if (document != null) {
            NodeList nl = document.getElementsByTagName(elementName);
            if (nl.getLength() == 1) {
                Element ele = (Element) nl.item(0);
                create(ele);
            } else {
                throw new IllegalStateException("Expected only one '" + elementName + "' element, but found: " + nl.getLength());
            }
        }

    }

    private void create(Node node) {
        Element ele = (Element) node;
        if (ele != null) {
            // load attributes
            String count = ele.getAttribute("count");
            if (!count.equals("")) { // getAttribute returns empty String if no value was specified
                setCount(new BigInteger(count));
            }
            // load elements
            NodeList nl = ele.getElementsByTagName("detector");
            for ( int i = 0; i < nl.getLength(); i++ ) {
                this.getDetector().add(new ComponentType((Element) nl.item(i)));
            }
            nl = null;
            nl = ele.getElementsByTagName("source");
            for ( int i = 0; i < nl.getLength(); i++ ) {
                this.getSource().add(new ComponentType((Element) nl.item(i)));
            }
            nl = null;
            nl = ele.getElementsByTagName("analyzer");
            for ( int i = 0; i < nl.getLength(); i++ ) {
                this.getAnalyzer().add(new ComponentType((Element) nl.item(i)));
            }

        }
    }

    ////////////////////
    // Getter + Setter

    public List<ComponentType> getSource() {
        if (sources == null) {
            sources = new ArrayList<ComponentType>();
        }
        return this.sources;
    }

    public List<ComponentType> getAnalyzer() {
        if (analyzers == null) {
            analyzers = new ArrayList<ComponentType>();
        }
        return this.analyzers;
    }

    public List<ComponentType> getDetector() {
        if (detectors == null) {
            detectors = new ArrayList<ComponentType>();
        }
        return this.detectors;
    }


    /**
     * Gets the value of the count property.
     * 
     * @return
     *     possible object is
     *     {@link BigInteger }
     *     
     */
    public BigInteger getCount() {
        return count;
    }

    /**
     * Sets the value of the count property.
     * 
     * @param value
     *     allowed object is
     *     {@link BigInteger }
     *     
     */
    public void setCount(BigInteger value) {
        this.count = value;
    }

}
