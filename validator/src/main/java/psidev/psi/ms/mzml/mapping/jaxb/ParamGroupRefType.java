//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.0.1-b01-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2007.08.17 at 01:20:51 PM BST 
//


package psidev.psi.ms.mzml.mapping.jaxb;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlType;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import java.io.ByteArrayInputStream;
import java.util.HashMap;
import java.util.List;
import java.util.ArrayList;


/**
 * <p>Java class for ParamGroupRefType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="ParamGroupRefType">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;attribute name="ref" use="required" type="{http://www.w3.org/2001/XMLSchema}anyURI" />
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "ParamGroupRefType")
public class ParamGroupRefType {

    @XmlAttribute(required = true)
    protected String ref;

    private static HashMap<String, ParamGroupType> refs = refs = new HashMap<String, ParamGroupType>();

    private String elementName = "paramGroupRef";

    public ParamGroupRefType() {
    }

    public static void addParamGroup(String aRef, ReferenceableParamGroupType aPGRT) {
        refs.put(aRef, aPGRT);
    }

    public static List getCVParams(Element element) {
        List result = new ArrayList();
        String ref = element.getAttribute("ref");
        if (ref.equals("")) { // getAttribute returns empty String if no value was specified
            // Schema is incorrect!
            throw new IllegalArgumentException("Element '" + element.getLocalName() + "' should contain a 'ref' attribute, but it was absent or empty! Please validate this file against its schema first!");
        }

        ParamGroupType pgt = refs.get(ref);
        if(pgt == null || (pgt.getCvParam().size() == 0 && pgt.getUserParam().size() == 0)) {
            throw new IllegalArgumentException("Element '" + element.getLocalName() + "' should reference a known ReferenceableParamGroup, with id '" + ref + "', but it was not found in memory. Try parsing the ReferenceableParamGroupList first, or check for inconsistencies in the references first!");
        }

        result = pgt.getCvParam();

        return result;
    }

    public static List getUserParams(Element element) {
        List result = new ArrayList();
        String ref = element.getAttribute("ref");
        if (!ref.equals("")) { // getAttribute returns empty String if no value was specified
        // Error condition!!
        }

        ParamGroupType pgt = refs.get(ref);

        result = pgt.getUserParam();

        return result;
    }


    public ParamGroupRefType(String xmlSnippet) {
        if (refs == null) {
            refs = new HashMap<String, ParamGroupType>();
        }
        parseXml(xmlSnippet);
    }

    public ParamGroupRefType(Element element) {
        if (refs == null) {
            refs = new HashMap<String, ParamGroupType>();
        }
        create(element);
    }

    ///////////////////
    // utilities

    private void parseXml(String xmlSnippet) {
        Document document = null;
        try {
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            DocumentBuilder builder = factory.newDocumentBuilder();
            ByteArrayInputStream str = new ByteArrayInputStream(xmlSnippet.getBytes());
            document = builder.parse( str );
        } catch ( Exception e ) {
            e.printStackTrace();
        }


        // we always expect a String representing a single xml tag, not a list of xml tags!
        if (document != null) {
            NodeList nl = document.getElementsByTagName(elementName);
            if (nl.getLength() == 1) {
                Element ele = (Element) nl.item(0);
                create(ele);
            } else {
                throw new IllegalStateException("Expected only one '" + elementName + "' element, but found: " + nl.getLength());
            }
        }

    }

    private void create(Node node) {
        Element ele = (Element) node;
        if (ele != null) {
            // load attributes
            String ref = ele.getAttribute("ref");
            if (!ref.equals("")) { // getAttribute returns empty String if no value was specified
                setRef(ref);
            }
            // load elements

        }
    }

    public void loadRef(String id, ParamGroupType paramGroup) {
        refs.put(id, paramGroup);
    }

    ////////////////////
    // Getter + Setter

    /**
     * Gets the value of the ref property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public ParamGroupType getRef() {
        return refs.get(ref);
    }

    /**
     * Sets the value of the ref property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setRef(String value) {
        this.ref = value;
    }

}
