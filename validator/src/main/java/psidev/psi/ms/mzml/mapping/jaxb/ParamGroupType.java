//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.0.1-b01-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2007.08.17 at 01:20:51 PM BST 
//


package psidev.psi.ms.mzml.mapping.jaxb;

import org.w3c.dom.Element;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import org.w3c.dom.Node;

import java.util.ArrayList;
import java.util.List;
import java.io.ByteArrayInputStream;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.DocumentBuilder;


/**
 * Structure allowing the use of a controlled (cvParam) or uncontrolled vocabulary (userParam), or a reference to a predefined set of these in this mzML file (paramGroupRef).
 * 
 * <p>Java class for ParamGroupType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="ParamGroupType">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element name="paramGroupRef" type="{http://psi.hupo.org/schema_revision/mzML_0.93}ParamGroupRefType" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="cvParam" type="{http://psi.hupo.org/schema_revision/mzML_0.93}CVParamType" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="userParam" type="{http://psi.hupo.org/schema_revision/mzML_0.93}UserParamType" maxOccurs="unbounded" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "ParamGroupType", propOrder = {
    "paramGroupRef",
    "cvParam",
    "userParam"
})
public class ParamGroupType {

    @XmlElement(required = true)
    protected List<ParamGroupRefType> paramGroupRef;
    @XmlElement(required = true)
    protected List<CVParamType> cvParam;
    @XmlElement(required = true)
    protected List<UserParamType> userParam;


    private String elementName1 = "ionSelection";
    private String elementName2 = "activation";
    private String elementName3 = "fileContent";

    public ParamGroupType() {}
    
    public ParamGroupType(String xmlSnippet) {
        parseXml(xmlSnippet);
    }

    public ParamGroupType(Element element) {
        create(element);
    }

    ///////////////////
    // utilities

    private void parseXml(String xmlSnippet) {
        Document document = null;
        try {
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            DocumentBuilder builder = factory.newDocumentBuilder();
            ByteArrayInputStream str = new ByteArrayInputStream(xmlSnippet.getBytes());
            document = builder.parse( str );
        } catch ( Exception e ) {
            e.printStackTrace();
        }


        // we always expect a String representing a single xml tag, not a list of xml tags!
        if (document != null) {
            // different element names for same type!
            NodeList nl = document.getElementsByTagName(elementName1);
            if (nl.getLength() == 0) { // if this element name did not match, try the next
                nl = document.getElementsByTagName(elementName2);
            }
            if (nl.getLength() == 0) { // if this element name did not match, try the next
                nl = document.getElementsByTagName(elementName3);
            }
            if (nl.getLength() == 1) { // we found one element! now we can create the Object
                Element ele = (Element) nl.item(0);
                create(ele);
            } else {
                throw new IllegalStateException("Expected one '" + elementName1 + "' element " +
                                                      "or one '" + elementName2 + "' element " +
                                                      "or one '" + elementName3 + "' element " +
                                                      ", but found: " + nl.getLength());
            }
        }

    }

    protected void create(Node node) {
        Element ele = (Element) node;
        if (ele != null) {
            // load attributes
            // load elements
            NodeList nl = ele.getElementsByTagName("paramGroupRef");
            // we only expect one such element!
            for ( int i = 0; i < nl.getLength(); i++ ) {
                Element e = (Element) nl.item(i);
                if(e.getParentNode().isSameNode(ele)) {
                    this.getCvParam().addAll(ParamGroupRefType.getCVParams(e));
                    this.getUserParam().addAll(ParamGroupRefType.getUserParams(e));
                }
            }
            nl = null;
            nl = ele.getElementsByTagName("cvParam");
            for ( int i = 0; i < nl.getLength(); i++ ) {
                Element e = (Element) nl.item(i);
                if(e.getParentNode().isSameNode(ele)) {
                    this.getCvParam().add(new CVParamType(e));
                }
            }
            nl = null;
            nl = ele.getElementsByTagName("userParam");
            for ( int i = 0; i < nl.getLength(); i++ ) {
                Element e = (Element) nl.item(i);
                if(e.getParentNode().isSameNode(ele)) {
                    this.getUserParam().add(new UserParamType(e));
                }
            }
        }
    }

    ////////////////////
    // Getter + Setter

    /**
     * Gets the value of the paramGroupRef property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the paramGroupRef property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getParamGroupRef().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ParamGroupRefType }
     * 
     * 
     */
    public List<ParamGroupRefType> getParamGroupRef() {
        if (paramGroupRef == null) {
            paramGroupRef = new ArrayList<ParamGroupRefType>();
        }
        return this.paramGroupRef;
    }

    /**
     * Gets the value of the cvParam property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the cvParam property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getCvParam().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link CVParamType }
     * 
     * 
     */
    public List<CVParamType> getCvParam() {
        if (cvParam == null) {
            cvParam = new ArrayList<CVParamType>();
        }
        return this.cvParam;
    }

    /**
     * Gets the value of the userParam property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the userParam property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getUserParam().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link UserParamType }
     * 
     * 
     */
    public List<UserParamType> getUserParam() {
        if (userParam == null) {
            userParam = new ArrayList<UserParamType>();
        }
        return this.userParam;
    }

}
