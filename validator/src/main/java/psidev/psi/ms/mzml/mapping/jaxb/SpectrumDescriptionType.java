//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.0.1-b01-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2007.08.17 at 01:20:51 PM BST 
//


package psidev.psi.ms.mzml.mapping.jaxb;

import org.w3c.dom.Element;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import org.w3c.dom.Node;

import javax.xml.bind.annotation.*;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.DocumentBuilder;
import java.util.ArrayList;
import java.util.List;
import java.io.ByteArrayInputStream;


/**
 * Description of the parameters for the mass spectrometer for a given acquisition (or list of acquisitions).
 * 
 * <p>Java class for SpectrumDescriptionType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="SpectrumDescriptionType">
 *   &lt;complexContent>
 *     &lt;extension base="{http://psi.hupo.org/schema_revision/mzML_0.93}ParamGroupType">
 *       &lt;sequence>
 *         &lt;element name="acquisitionList" type="{http://psi.hupo.org/schema_revision/mzML_0.93}AcquisitionListType" minOccurs="0"/>
 *         &lt;element name="precursorList" type="{http://psi.hupo.org/schema_revision/mzML_0.93}PrecursorListType" minOccurs="0"/>
 *         &lt;element name="scan" minOccurs="0">
 *           &lt;complexType>
 *             &lt;complexContent>
 *               &lt;extension base="{http://psi.hupo.org/schema_revision/mzML_0.93}ScanType">
 *                 &lt;sequence>
 *                   &lt;element name="selectionWindowList">
 *                     &lt;complexType>
 *                       &lt;complexContent>
 *                         &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                           &lt;sequence>
 *                             &lt;element name="selectionWindow" maxOccurs="unbounded">
 *                               &lt;complexType>
 *                                 &lt;complexContent>
 *                                   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                                     &lt;sequence>
 *                                       &lt;element name="cvParam" type="{http://psi.hupo.org/schema_revision/mzML_0.93}CVParamType" maxOccurs="unbounded" minOccurs="2"/>
 *                                     &lt;/sequence>
 *                                   &lt;/restriction>
 *                                 &lt;/complexContent>
 *                               &lt;/complexType>
 *                             &lt;/element>
 *                           &lt;/sequence>
 *                           &lt;attribute name="count" use="required" type="{http://www.w3.org/2001/XMLSchema}int" />
 *                         &lt;/restriction>
 *                       &lt;/complexContent>
 *                     &lt;/complexType>
 *                   &lt;/element>
 *                 &lt;/sequence>
 *               &lt;/extension>
 *             &lt;/complexContent>
 *           &lt;/complexType>
 *         &lt;/element>
 *       &lt;/sequence>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "SpectrumDescriptionType", propOrder = {
    "acquisitionList",
    "precursorList",
    "scan"
})
public class SpectrumDescriptionType
    extends ParamGroupType
{

    protected AcquisitionListType acquisitionList;
    protected PrecursorListType precursorList;
    protected SpectrumDescriptionType.Scan scan;


    private String elementName = "spectrumDescription";

    public SpectrumDescriptionType() {}

    public SpectrumDescriptionType(String xmlSnippet) {
        parseXml(xmlSnippet);
    }

    public SpectrumDescriptionType(Element element) {
        create(element);
    }

    ///////////////////
    // utilities

    private void parseXml(String xmlSnippet) {
        Document document = null;
        try {
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            DocumentBuilder builder = factory.newDocumentBuilder();
            ByteArrayInputStream str = new ByteArrayInputStream(xmlSnippet.getBytes());
            document = builder.parse( str );
        } catch ( Exception e ) {
            e.printStackTrace();
        }

        // we always expect a String representing a single xml tag, not a list of xml tags!
        if (document != null) {
            NodeList nl = document.getElementsByTagName(elementName);
            if (nl.getLength() == 1) {
                Element ele = (Element) nl.item(0);
                create(ele);
            } else {
                throw new IllegalStateException("Expected only one '" + elementName + "' element, but found: " + nl.getLength());
            }
        }

    }

    protected void create(Node node) {
        Element ele = (Element) node;
        if (ele != null) {
            // load attributes
                // no attributes
            // load elements
            NodeList nl = ele.getElementsByTagName("precursorList");
            // we only expect one such element!
            if (nl.getLength() == 1) {
                precursorList = new PrecursorListType((Element) nl.item(0));
            }
            nl = null;
            nl = ele.getElementsByTagName("acquisitionList");
            // we only expect one such element!
            if (nl.getLength() == 1) {
                acquisitionList = new AcquisitionListType((Element) nl.item(0));
            }
            nl = null;
            nl = ele.getElementsByTagName("scan");
            // we expect no more than one such element!
            if (nl.getLength() == 1) {
                scan = new Scan((Element) nl.item(0));
            } else if (nl.getLength()>1){
                throw new IllegalStateException("Expected only one 'scan' element, but found: " + nl.getLength());
            }
            // inherited form ParamGroupType
            super.create(node);
        }
    }

    ////////////////////
    // Getter + Setter


    /**
     * Gets the value of the acquisitionList property.
     * 
     * @return
     *     possible object is
     *     {@link AcquisitionListType }
     *     
     */
    public AcquisitionListType getAcquisitionList() {
        return acquisitionList;
    }

    /**
     * Sets the value of the acquisitionList property.
     * 
     * @param value
     *     allowed object is
     *     {@link AcquisitionListType }
     *     
     */
    public void setAcquisitionList(AcquisitionListType value) {
        this.acquisitionList = value;
    }

    /**
     * Gets the value of the precursorList property.
     * 
     * @return
     *     possible object is
     *     {@link PrecursorListType }
     *     
     */
    public PrecursorListType getPrecursorList() {
        return precursorList;
    }

    /**
     * Sets the value of the precursorList property.
     * 
     * @param value
     *     allowed object is
     *     {@link PrecursorListType }
     *     
     */
    public void setPrecursorList(PrecursorListType value) {
        this.precursorList = value;
    }

    /**
     * Gets the value of the scan property.
     * 
     * @return
     *     possible object is
     *     {@link SpectrumDescriptionType.Scan }
     *     
     */
    public SpectrumDescriptionType.Scan getScan() {
        return scan;
    }

    /**
     * Sets the value of the scan property.
     * 
     * @param value
     *     allowed object is
     *     {@link SpectrumDescriptionType.Scan }
     *     
     */
    public void setScan(SpectrumDescriptionType.Scan value) {
        this.scan = value;
    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType>
     *   &lt;complexContent>
     *     &lt;extension base="{http://psi.hupo.org/schema_revision/mzML_0.93}ScanType">
     *       &lt;sequence>
     *         &lt;element name="selectionWindowList">
     *           &lt;complexType>
     *             &lt;complexContent>
     *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *                 &lt;sequence>
     *                   &lt;element name="selectionWindow" maxOccurs="unbounded">
     *                     &lt;complexType>
     *                       &lt;complexContent>
     *                         &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *                           &lt;sequence>
     *                             &lt;element name="cvParam" type="{http://psi.hupo.org/schema_revision/mzML_0.93}CVParamType" maxOccurs="unbounded" minOccurs="2"/>
     *                           &lt;/sequence>
     *                         &lt;/restriction>
     *                       &lt;/complexContent>
     *                     &lt;/complexType>
     *                   &lt;/element>
     *                 &lt;/sequence>
     *                 &lt;attribute name="count" use="required" type="{http://www.w3.org/2001/XMLSchema}int" />
     *               &lt;/restriction>
     *             &lt;/complexContent>
     *           &lt;/complexType>
     *         &lt;/element>
     *       &lt;/sequence>
     *     &lt;/extension>
     *   &lt;/complexContent>
     * &lt;/complexType>
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "selectionWindowList"
    })
    public static class Scan
        extends ScanType
    {

        @XmlElement(required = true)
        protected SpectrumDescriptionType.Scan.SelectionWindowList selectionWindowList;


        private String elementName = "scan";

        public Scan() {}

        public Scan(String xmlSnippet) {
            parseXml(xmlSnippet);
        }

        public Scan(Element element) {
            create(element);
        }

        ///////////////////
        // utilities

        private void parseXml(String xmlSnippet) {
            Document document = null;
            try {
                DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
                DocumentBuilder builder = factory.newDocumentBuilder();
                ByteArrayInputStream str = new ByteArrayInputStream(xmlSnippet.getBytes());
                document = builder.parse( str );
            } catch ( Exception e ) {
                e.printStackTrace();
            }


            // we always expect a String representing a single xml tag, not a list of xml tags!
            if (document != null) {
                NodeList nl = document.getElementsByTagName(elementName);
                if (nl.getLength() == 1) {
                    Element ele = (Element) nl.item(0);
                    create(ele);
                } else {
                    throw new IllegalStateException("Expected only one '" + elementName + "' element, but found: " + nl.getLength());
                }
            }

        }

        protected void create(Node node) {
            Element ele = (Element) node;
            if (ele != null) {
                // load attributes
                // inherited from ScanType
                String instrumentRef = ele.getAttribute("instrumentRef");
                if (!instrumentRef.equals("")) { // getAttribute returns empty String if no value was specified
                    setInstrumentRef(instrumentRef);
                }
                // load elements
                NodeList nl = ele.getElementsByTagName("selectionWindowList");
                // we only expect one such element!
                if (nl.getLength() == 1) {
                    selectionWindowList = new SelectionWindowList((Element) nl.item(0));
                } else {
                    throw new IllegalStateException("Expected only one 'selectionWindowList' element, but found: " + nl.getLength());
                }
                // inherited form ParamGroupType
                super.create(node);
            }
        }

        ////////////////////
        // Getter + Setter

        /**
         * Gets the value of the selectionWindowList property.
         * 
         * @return
         *     possible object is
         *     {@link SpectrumDescriptionType.Scan.SelectionWindowList }
         *     
         */
        public SpectrumDescriptionType.Scan.SelectionWindowList getSelectionWindowList() {
            return selectionWindowList;
        }

        /**
         * Sets the value of the selectionWindowList property.
         * 
         * @param value
         *     allowed object is
         *     {@link SpectrumDescriptionType.Scan.SelectionWindowList }
         *     
         */
        public void setSelectionWindowList(SpectrumDescriptionType.Scan.SelectionWindowList value) {
            this.selectionWindowList = value;
        }


        /**
         * <p>Java class for anonymous complex type.
         * 
         * <p>The following schema fragment specifies the expected content contained within this class.
         * 
         * <pre>
         * &lt;complexType>
         *   &lt;complexContent>
         *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
         *       &lt;sequence>
         *         &lt;element name="selectionWindow" maxOccurs="unbounded">
         *           &lt;complexType>
         *             &lt;complexContent>
         *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
         *                 &lt;sequence>
         *                   &lt;element name="cvParam" type="{http://psi.hupo.org/schema_revision/mzML_0.93}CVParamType" maxOccurs="unbounded" minOccurs="2"/>
         *                 &lt;/sequence>
         *               &lt;/restriction>
         *             &lt;/complexContent>
         *           &lt;/complexType>
         *         &lt;/element>
         *       &lt;/sequence>
         *       &lt;attribute name="count" use="required" type="{http://www.w3.org/2001/XMLSchema}int" />
         *     &lt;/restriction>
         *   &lt;/complexContent>
         * &lt;/complexType>
         * </pre>
         * 
         * 
         */
        @XmlAccessorType(XmlAccessType.FIELD)
        @XmlType(name = "", propOrder = {
            "selectionWindow"
        })
        public static class SelectionWindowList {

            @XmlElement(required = true)
            protected List<SpectrumDescriptionType.Scan.SelectionWindowList.SelectionWindow> selectionWindow;
            @XmlAttribute(required = true)
            protected int count;


            private String elementName = "selectionWindowList";

            public SelectionWindowList() {}

            public SelectionWindowList(String xmlSnippet) {
                parseXml(xmlSnippet);
            }

            public SelectionWindowList(Element element) {
                create(element);
            }

            ///////////////////
            // utilities

            private void parseXml(String xmlSnippet) {
                Document document = null;
                try {
                    DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
                    DocumentBuilder builder = factory.newDocumentBuilder();
                    ByteArrayInputStream str = new ByteArrayInputStream(xmlSnippet.getBytes());
                    document = builder.parse( str );
                } catch ( Exception e ) {
                    e.printStackTrace();
                }


                // we always expect a String representing a single xml tag, not a list of xml tags!
                if (document != null) {
                    NodeList nl = document.getElementsByTagName(elementName);
                    if (nl.getLength() == 1) {
                        Element ele = (Element) nl.item(0);
                        create(ele);
                    } else {
                        throw new IllegalStateException("Expected only one '" + elementName + "' element, but found: " + nl.getLength());
                    }
                }

            }

            private void create(Node node) {
                Element ele = (Element) node;
                if (ele != null) {
                    // load attributes
                    String count = ele.getAttribute("count");
                    if (!count.equals("")) { // getAttribute returns empty String if no value was specified
                        setCount(Integer.parseInt(count));
                    }

                    // load elements
                    NodeList nl = ele.getElementsByTagName("selectionWindow");
                    for ( int i = 0; i < nl.getLength(); i++ ) {
                        this.getSelectionWindow().add(new SelectionWindow((Element) nl.item(i)));
                    }

                }
            }

            ////////////////////
            // Getter + Setter

            /**
             * Gets the value of the selectionWindow property.
             * 
             * <p>
             * This accessor method returns a reference to the live list,
             * not a snapshot. Therefore any modification you make to the
             * returned list will be present inside the JAXB object.
             * This is why there is not a <CODE>set</CODE> method for the selectionWindow property.
             * 
             * <p>
             * For example, to add a new item, do as follows:
             * <pre>
             *    getSelectionWindow().add(newItem);
             * </pre>
             * 
             * 
             * <p>
             * Objects of the following type(s) are allowed in the list
             * {@link SpectrumDescriptionType.Scan.SelectionWindowList.SelectionWindow }
             * 
             * 
             */
            public List<SpectrumDescriptionType.Scan.SelectionWindowList.SelectionWindow> getSelectionWindow() {
                if (selectionWindow == null) {
                    selectionWindow = new ArrayList<SpectrumDescriptionType.Scan.SelectionWindowList.SelectionWindow>();
                }
                return this.selectionWindow;
            }

            /**
             * Gets the value of the count property.
             * 
             */
            public int getCount() {
                return count;
            }

            /**
             * Sets the value of the count property.
             * 
             */
            public void setCount(int value) {
                this.count = value;
            }


            /**
             * <p>Java class for anonymous complex type.
             * 
             * <p>The following schema fragment specifies the expected content contained within this class.
             * 
             * <pre>
             * &lt;complexType>
             *   &lt;complexContent>
             *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
             *       &lt;sequence>
             *         &lt;element name="cvParam" type="{http://psi.hupo.org/schema_revision/mzML_0.93}CVParamType" maxOccurs="unbounded" minOccurs="2"/>
             *       &lt;/sequence>
             *     &lt;/restriction>
             *   &lt;/complexContent>
             * &lt;/complexType>
             * </pre>
             * 
             * 
             */
            @XmlAccessorType(XmlAccessType.FIELD)
            @XmlType(name = "", propOrder = {
                "cvParam"
            })
            public static class SelectionWindow {

                @XmlElement(required = true)
                protected List<CVParamType> cvParam;


                private String elementName = "selectionWindow";

                public SelectionWindow() {}

                public SelectionWindow(String xmlSnippet) {
                    parseXml(xmlSnippet);
                }

                public SelectionWindow(Element element) {
                    create(element);
                }

                ///////////////////
                // utilities

                private void parseXml(String xmlSnippet) {
                    Document document = null;
                    try {
                        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
                        DocumentBuilder builder = factory.newDocumentBuilder();
                        ByteArrayInputStream str = new ByteArrayInputStream(xmlSnippet.getBytes());
                        document = builder.parse( str );
                    } catch ( Exception e ) {
                        e.printStackTrace();
                    }


                    // we always expect a String representing a single xml tag, not a list of xml tags!
                    if (document != null) {
                        NodeList nl = document.getElementsByTagName(elementName);
                        if (nl.getLength() == 1) {
                            Element ele = (Element) nl.item(0);
                            create(ele);
                        } else {
                            throw new IllegalStateException("Expected only one '" + elementName + "' element, but found: " + nl.getLength());
                        }
                    }

                }

                private void create(Node node) {
                    Element ele = (Element) node;
                    if (ele != null) {
                        // load attributes
                        // create other elements
                        NodeList nl = ele.getElementsByTagName("cvParam");
                        for ( int i = 0; i < nl.getLength(); i++ ) {
                            this.getCvParam().add(new CVParamType((Element) nl.item(i)));
                        }


                    }
                }

                ////////////////////
                // Getter + Setter

                /**
                 * Gets the value of the cvParam property.
                 * 
                 * <p>
                 * This accessor method returns a reference to the live list,
                 * not a snapshot. Therefore any modification you make to the
                 * returned list will be present inside the JAXB object.
                 * This is why there is not a <CODE>set</CODE> method for the cvParam property.
                 * 
                 * <p>
                 * For example, to add a new item, do as follows:
                 * <pre>
                 *    getCvParam().add(newItem);
                 * </pre>
                 * 
                 * 
                 * <p>
                 * Objects of the following type(s) are allowed in the list
                 * {@link CVParamType }
                 * 
                 * 
                 */
                public List<CVParamType> getCvParam() {
                    if (cvParam == null) {
                        cvParam = new ArrayList<CVParamType>();
                    }
                    return this.cvParam;
                }

            }

        }

    }

}
