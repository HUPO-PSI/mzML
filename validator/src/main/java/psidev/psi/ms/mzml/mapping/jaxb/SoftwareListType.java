//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.0.1-b01-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2007.08.17 at 01:20:51 PM BST 
//


package psidev.psi.ms.mzml.mapping.jaxb;

import org.w3c.dom.Element;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import org.w3c.dom.Node;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;
import java.io.ByteArrayInputStream;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.DocumentBuilder;


/**
 * List and descriptions of software used to acquire and/or process the data in this mzML file.
 * 
 * <p>Java class for SoftwareListType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="SoftwareListType">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element name="software" maxOccurs="unbounded">
 *           &lt;complexType>
 *             &lt;complexContent>
 *               &lt;extension base="{http://psi.hupo.org/schema_revision/mzML_0.93}SoftwareType">
 *                 &lt;sequence>
 *                   &lt;element name="softwareParam">
 *                     &lt;complexType>
 *                       &lt;complexContent>
 *                         &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                           &lt;attribute name="accession" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
 *                           &lt;attribute name="cvLabel" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
 *                           &lt;attribute name="name" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
 *                           &lt;attribute name="version" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
 *                         &lt;/restriction>
 *                       &lt;/complexContent>
 *                     &lt;/complexType>
 *                   &lt;/element>
 *                 &lt;/sequence>
 *                 &lt;attribute name="id" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
 *               &lt;/extension>
 *             &lt;/complexContent>
 *           &lt;/complexType>
 *         &lt;/element>
 *       &lt;/sequence>
 *       &lt;attribute name="count" use="required" type="{http://www.w3.org/2001/XMLSchema}nonNegativeInteger" />
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "SoftwareListType", propOrder = {
    "software"
})
public class SoftwareListType {

    @XmlElement(required = true)
    protected List<SoftwareListType.Software> software;
    @XmlAttribute(required = true)
    protected BigInteger count;


    private String elementName = "softwareList";

    public SoftwareListType() {}

    public SoftwareListType(String xmlSnippet) {
        parseXml(xmlSnippet);
    }

    public SoftwareListType(Element element) {
        create(element);
    }

    ///////////////////
    // utilities

    private void parseXml(String xmlSnippet) {
        Document document = null;
        try {
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            DocumentBuilder builder = factory.newDocumentBuilder();
            ByteArrayInputStream str = new ByteArrayInputStream(xmlSnippet.getBytes());
            document = builder.parse( str );
        } catch ( Exception e ) {
            e.printStackTrace();
        }


        // we always expect a String representing a single xml tag, not a list of xml tags!
        if (document != null) {
            NodeList nl = document.getElementsByTagName(elementName);
            if (nl.getLength() == 1) {
                Element ele = (Element) nl.item(0);
                create(ele);
            } else {
                throw new IllegalStateException("Expected only one '" + elementName + "' element, but found: " + nl.getLength());
            }
        }

    }

    private void create(Node node) {
        Element ele = (Element) node;
        if (ele != null) {
            // load attributes
            String count = ele.getAttribute("count");
            if (!count.equals("")) { // getAttribute returns empty String if no value was specified
                setCount(new BigInteger(count));
            }
            // load elements
            NodeList nl = ele.getElementsByTagName("software");
            for ( int i = 0; i < nl.getLength(); i++ ) {
                this.getSoftware().add(new Software((Element) nl.item(i)));
            }


        }
    }

    ////////////////////
    // Getter + Setter

    /**
     * Gets the value of the software property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the software property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getSoftware().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link SoftwareListType.Software }
     * 
     * 
     */
    public List<SoftwareListType.Software> getSoftware() {
        if (software == null) {
            software = new ArrayList<SoftwareListType.Software>();
        }
        return this.software;
    }

    /**
     * Gets the value of the count property.
     * 
     * @return
     *     possible object is
     *     {@link BigInteger }
     *     
     */
    public BigInteger getCount() {
        return count;
    }

    /**
     * Sets the value of the count property.
     * 
     * @param value
     *     allowed object is
     *     {@link BigInteger }
     *     
     */
    public void setCount(BigInteger value) {
        this.count = value;
    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType>
     *   &lt;complexContent>
     *     &lt;extension base="{http://psi.hupo.org/schema_revision/mzML_0.93}SoftwareType">
     *       &lt;sequence>
     *         &lt;element name="softwareParam">
     *           &lt;complexType>
     *             &lt;complexContent>
     *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *                 &lt;attribute name="accession" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
     *                 &lt;attribute name="cvLabel" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
     *                 &lt;attribute name="name" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
     *                 &lt;attribute name="version" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
     *               &lt;/restriction>
     *             &lt;/complexContent>
     *           &lt;/complexType>
     *         &lt;/element>
     *       &lt;/sequence>
     *       &lt;attribute name="id" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
     *     &lt;/extension>
     *   &lt;/complexContent>
     * &lt;/complexType>
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "softwareParam"
    })
    public static class Software
        extends SoftwareType
    {

        @XmlElement(required = true)
        protected SoftwareListType.Software.SoftwareParam softwareParam;
        @XmlAttribute(required = true)
        protected String id;


        private String elementName = "software";

        public Software() {}

        public Software(String xmlSnippet) {
            parseXml(xmlSnippet);
        }

        public Software(Element element) {
            create(element);
        }

        ///////////////////
        // utilities

        private void parseXml(String xmlSnippet) {
            Document document = null;
            try {
                DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
                DocumentBuilder builder = factory.newDocumentBuilder();
                ByteArrayInputStream str = new ByteArrayInputStream(xmlSnippet.getBytes());
                document = builder.parse( str );
            } catch ( Exception e ) {
                e.printStackTrace();
            }


            // we always expect a String representing a single xml tag, not a list of xml tags!
            if (document != null) {
                NodeList nl = document.getElementsByTagName(elementName);
                if (nl.getLength() == 1) {
                    Element ele = (Element) nl.item(0);
                    create(ele);
                } else {
                    throw new IllegalStateException("Expected only one '" + elementName + "' element, but found: " + nl.getLength());
                }
            }

        }

        private void create(Node node) {
            Element ele = (Element) node;
            if (ele != null) {
                // load attributes
                String id = ele.getAttribute("id");
                if (!id.equals("")) { // getAttribute returns empty String if no value was specified
                    setId(id);
                }
                // load elements
                NodeList nl = ele.getElementsByTagName("softwareParam");
                // we only expect one such element!
                if (nl.getLength() == 1) {
                    softwareParam = new SoftwareParam((Element) nl.item(0));
                } else {
                    throw new IllegalStateException("Expected only one 'softwareParam' element, but found: " + nl.getLength());
                }

            }
        }

        ////////////////////
        // Getter + Setter

        /**
         * Gets the value of the softwareParam property.
         * 
         * @return
         *     possible object is
         *     {@link SoftwareListType.Software.SoftwareParam }
         *     
         */
        public SoftwareListType.Software.SoftwareParam getSoftwareParam() {
            return softwareParam;
        }

        /**
         * Sets the value of the softwareParam property.
         * 
         * @param value
         *     allowed object is
         *     {@link SoftwareListType.Software.SoftwareParam }
         *     
         */
        public void setSoftwareParam(SoftwareListType.Software.SoftwareParam value) {
            this.softwareParam = value;
        }

        /**
         * Gets the value of the id property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getId() {
            return id;
        }

        /**
         * Sets the value of the id property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setId(String value) {
            this.id = value;
        }


        /**
         * <p>Java class for anonymous complex type.
         * 
         * <p>The following schema fragment specifies the expected content contained within this class.
         * 
         * <pre>
         * &lt;complexType>
         *   &lt;complexContent>
         *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
         *       &lt;attribute name="accession" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
         *       &lt;attribute name="cvLabel" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
         *       &lt;attribute name="name" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
         *       &lt;attribute name="version" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
         *     &lt;/restriction>
         *   &lt;/complexContent>
         * &lt;/complexType>
         * </pre>
         * 
         * 
         */
        @XmlAccessorType(XmlAccessType.FIELD)
        @XmlType(name = "")
        public static class SoftwareParam {

            @XmlAttribute(required = true)
            protected String accession;
            @XmlAttribute(required = true)
            protected String cvLabel;
            @XmlAttribute(required = true)
            protected String name;
            @XmlAttribute(required = true)
            protected String version;


            private String elementName = "softwareParam";

            public SoftwareParam() {}

            public SoftwareParam(String xmlSnippet) {
                parseXml(xmlSnippet);
            }

            public SoftwareParam(Element element) {
                create(element);
            }

            ///////////////////
            // utilities

            private void parseXml(String xmlSnippet) {
                Document document = null;
                try {
                    DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
                    DocumentBuilder builder = factory.newDocumentBuilder();
                    ByteArrayInputStream str = new ByteArrayInputStream(xmlSnippet.getBytes());
                    document = builder.parse( str );
                } catch ( Exception e ) {
                    e.printStackTrace();
                }


                // we always expect a String representing a single xml tag, not a list of xml tags!
                if (document != null) {
                    NodeList nl = document.getElementsByTagName(elementName);
                    if (nl.getLength() == 1) {
                        Element ele = (Element) nl.item(0);
                        create(ele);
                    } else {
                        throw new IllegalStateException("Expected only one '" + elementName + "' element, but found: " + nl.getLength());
                    }
                }

            }

            private void create(Node node) {
                Element ele = (Element) node;
                if (ele != null) {
                    // load attributes
                    String accession = ele.getAttribute("accession");
                    if (!accession.equals("")) { // getAttribute returns empty String if no value was specified
                        setAccession(accession);
                    }
                    String cvLabel = ele.getAttribute("cvLabel");
                    if (!cvLabel.equals("")) { // getAttribute returns empty String if no value was specified
                        setCvLabel(cvLabel);
                    }
                    String name = ele.getAttribute("name");
                    if (!name.equals("")) { // getAttribute returns empty String if no value was specified
                        setName(name);
                    }
                    String version = ele.getAttribute("version");
                    if (!version.equals("")) { // getAttribute returns empty String if no value was specified
                        setVersion(version);
                    }
                    // load elements

                }
            }

            ////////////////////
            // Getter + Setter

            /**
             * Gets the value of the accession property.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getAccession() {
                return accession;
            }

            /**
             * Sets the value of the accession property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             */
            public void setAccession(String value) {
                this.accession = value;
            }

            /**
             * Gets the value of the cvLabel property.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getCvLabel() {
                return cvLabel;
            }

            /**
             * Sets the value of the cvLabel property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             */
            public void setCvLabel(String value) {
                this.cvLabel = value;
            }

            /**
             * Gets the value of the name property.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getName() {
                return name;
            }

            /**
             * Sets the value of the name property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             */
            public void setName(String value) {
                this.name = value;
            }

            /**
             * Gets the value of the version property.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getVersion() {
                return version;
            }

            /**
             * Sets the value of the version property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             */
            public void setVersion(String value) {
                this.version = value;
            }

        }

    }

}
